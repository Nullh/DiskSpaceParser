;Function	LoadFile()
;Author		Bryce Lindsay Bryce@isorg.net
;Action		Loads a file in to a variable or an array.
;Syntax		LoadFile("Filename",[Array Delim], [UNI/ANSI file type])
;
;Version	1.1
;
;Date Revised	9:14 AM 8/15/2006

;Parameters	Filename
;		name of the file that you want to load.
;
;		Optional Array
;		set this option if you want to return the 
;		information as an array split on the given value
;
;		Unicode/ANSI file type
;		3 = force file open as ANSI
;		2 = forse file open as UNI
;		1 = Opens the file using the system default. (the UDF will use this as default)
;
;Remarks		finaly made this into a UDF and posted it... got tired 
;		of having to hunt it down.
;
;Returns		if the array flag is not set it returns a variable 
;		containing the contents of the file.
;
;		if the array flag is set, it will return an array 
;		of the file split on the value of the given variable
;
;Dependencies	Scripting.FileSystemObject

Function loadfile($file, optional $array, $Uni)
	DIM $fso,$f,$fs
	if $uni $uni = $uni-3 else $uni = -2 endif

	if not $uni $uni = -2 endif
	$fso = CreateObject("Scripting.FileSystemObject")
	$f = $fso.GetFile($file)
	If @ERROR Exit 2 EndIf
	$fs = $f.OpenAsTextStream(1,$uni)
	if not $array
		$loadfile = $fs.Read($f.size)
	else
		$loadfile = Split($fs.Read($f.size),$array)
	endif
	Exit @ERROR 
EndFunction

;Function checkShare()
;Checks the free space on a share
;By Neil Holmes
;Parameters:
;shareName - Name of the share to check the space on
;fileHandle - Numeric value of the file handle to write size output to
Function checkShare($shareName, $fileHandle)

	;Map the shares to drive X
	Use X: /DELETE
	Use X: $shareName
	
	;if we can't get to the share
	if @ERROR <> 0
		?"Cannot connect to share " + $shareName
		$null = writeline($fileHandle, $shareName + ", - , - " + @CRLF)
	else
		;get free space
		$sizeinKB = getDiskSpace("X:")
		;cast space to a double float
		$sizeinkb = CDbl($sizeinkb)	
		;display the space, based on how much there is
		;If we have less than 1MB
		if $sizeinKB <= 1024 and $sizeinKB >= 0
			$null = writeline($fileHandle, $shareName + "," + Formatnumber($sizeinKB,2) + " KB," + $sizeinKB + @CRLF)
		;If we have more than 1GB
		else 
			if $sizeinKB > 1048576
				?"Free space on " + $shareName + " is " + Formatnumber($sizeinKB/1048576.0,2,NULL,NULL,0) + " GB"
				$null = writeline($fileHandle, $shareName + "," + Formatnumber($sizeinKB/1048576.0,2,NULL,NULL,0) + " GB," + $sizeinKB + @CRLF)
			
			else 
				if $sizeinKB < 0
					?"Free space on " + $shareName + " is greater than 2TB"
					$null = writeline($fileHandle, $shareName + ",>2 TB" + @CRLF)
					;If we have more than 1MB and less than 1GB
				else
					?"Free space on " $shareName + " is " + Formatnumber($sizeinKB/1024.0,2) + " MB"
					$null = writeline($fileHandle, $shareName + "," + Formatnumber($sizeinKB/1024.0,2) + " MB," + $sizeinKB + @CRLF)
				endif
			endif
		endif
	endif
	;End the drive mapping
	Use X: /DELETE
EndFunction

; -==||Main execution begins here||==-

;Load our file of servers into an array
$servers[] = loadfile("servers.txt", @crlf, 1)

;Create output file
if open(1, "output.csv", 5) <> 0
	? "Critical: Cannot open output file. Exiting..."
	Exit
endif

;Write date and time
;$null = writeline(1, "Generated by " + @USERID + " on " + @DATE + " at " + @TIME + @CRLF)
;Write Column Names
;$null = writeline(1, "Share Name,Free Space,Free Space in KB" + @CRLF)

;Parse the array and check each share
for each $i in $servers
	;If we have a valid share to check, run checkShare func (above)
	if instr($i, "\\")
		checkShare($i, 1)
	;If we have an empty string
	else 
		$null = writeline(1, @CRLF)
	endif
next
